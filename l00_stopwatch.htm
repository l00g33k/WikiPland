<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html><head><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=ISO-8859-1">
<style type="text/css">
#clock   { font-family: Arial, Helvetica, sans-serif; font-size: 2.0em; color: white; background-color: black; border: 2px solid purple; padding: 2px; }
#countA  { font-family: Arial, Helvetica, sans-serif; font-size: 2.0em; color: white; background-color: black; border: 2px solid purple; padding: 2px; }
#countB  { font-family: Arial, Helvetica, sans-serif; font-size: 2.0em; color: white; background-color: black; border: 2px solid purple; padding: 2px; }
</style>

<script Language="JavaScript">
<!--
var timerID = null;
var timerRunning = false;
var startsec;
var countAstat = 1;
var countAtime = 0;
var countBstat = 1;
var countBtime = 0

function resetcountA () {
    var currentTime = new Date ( );
    countAtime = (currentTime.getTime () -
                  currentTime.getTime () % 1000) / 1000;
    countAstat = 1;
}
function pausecountA () {
    var currentTime = new Date ( );
    var tmp = (currentTime.getTime () -
               currentTime.getTime () % 1000) / 1000;
    countAstat = !countAstat;
    countAtime = tmp - countAtime;
}
function resetcountB () {
    var currentTime = new Date ( );
    countBtime = (currentTime.getTime () -
                  currentTime.getTime () % 1000) / 1000;
    countBstat = 1;
}
function pausecountB () {
    var currentTime = new Date ( );
    var tmp = (currentTime.getTime () -
               currentTime.getTime () % 1000) / 1000;
    countBstat = !countBstat;
    countBtime = tmp - countBtime;
}

function stopclock (){
    if(timerRunning)
        clearTimeout(timerID);
    timerRunning = false;
}

function startclock () {
    // Make sure the clock is stopped
    stopclock();
    var currentTime = new Date ( );

    var currentHours = currentTime.getHours ( );
    var currentMinutes = currentTime.getMinutes ( );
    var currentSeconds = currentTime.getSeconds ( );
    startsec = currentSeconds + currentMinutes * 60 + currentHours * 3600;

    resetcountA ();
    resetcountB ();
    updateClock();
}

function updateClock () {
    var currentTime = new Date ( );

    var currentHours = currentTime.getHours ( );
    var currentMinutes = currentTime.getMinutes ( );
    var currentSeconds = currentTime.getSeconds ( );

    // Pad the minutes and seconds with leading zeros, if required
    currentHours   = ( currentHours < 10 ? "0" : "" ) + currentHours;
    currentMinutes = ( currentMinutes < 10 ? "0" : "" ) + currentMinutes;
    currentSeconds = ( currentSeconds < 10 ? "0" : "" ) + currentSeconds;
    // Compose the string for display
    var currentTimeString = currentHours + ":" + currentMinutes + ":" + currentSeconds;
    // Update the time display
    document.getElementById("clock").firstChild.nodeValue = currentTimeString;

    var tmp = (currentTime.getTime () -
               currentTime.getTime () % 1000) / 1000;
    if (countAstat) {
        tmp = tmp - countAtime;
    } else {
        tmp = countAtime;
    }
    currentSeconds = tmp % 60;
    tmp = (tmp - currentSeconds) / 60;
    currentMinutes = tmp % 60;
    currentHours   = (tmp - currentMinutes) / 60;

    // Pad the minutes and seconds with leading zeros, if required
    currentHours   = ( currentHours < 10 ? "0" : "" ) + currentHours;
    currentMinutes = ( currentMinutes < 10 ? "0" : "" ) + currentMinutes;
    currentSeconds = ( currentSeconds < 10 ? "0" : "" ) + currentSeconds;
    // Compose the string for display
    var currentTimeString = currentHours + ":" + currentMinutes + ":" + currentSeconds;
    document.getElementById("countA").firstChild.nodeValue = currentTimeString;

    tmp = (currentTime.getTime () -
           currentTime.getTime () % 1000) / 1000;
    if (countBstat) {
        tmp = tmp - countBtime;
    } else {
        tmp = countBtime;
    }
    currentSeconds = tmp % 60;
    tmp = (tmp - currentSeconds) / 60;
    currentMinutes = tmp % 60;
    currentHours   = (tmp - currentMinutes) / 60;

    // Pad the minutes and seconds with leading zeros, if required
    currentHours   = ( currentHours < 10 ? "0" : "" ) + currentHours;
    currentMinutes = ( currentMinutes < 10 ? "0" : "" ) + currentMinutes;
    currentSeconds = ( currentSeconds < 10 ? "0" : "" ) + currentSeconds;
    // Compose the string for display
    currentTimeString = currentHours + ":" + currentMinutes + ":" + currentSeconds;
    document.getElementById("countB").firstChild.nodeValue = currentTimeString;


    timerID = setTimeout("updateClock()",1000);
    timerRunning = true;
}

// -->
</script>

</head><body onload="startclock();">
<div style="text-align: center;">
<table border=1 cellpadding=10 cellspacing=1>
    <tr><td>
        <span id="clock">&nbsp;</span>
    </td><td>
        <form name="clock" onSubmit="0">
            <input type="button" name="start" value="Run"  onClick="startclock()">
            <input type="button" name="stop"  value="Stop" onClick="stopclock()">
        </form>
    </td></tr><tr><td>
        <span id="countA">&nbsp;</span>
    </td><td>
        <form name="countA" onSubmit="0">
            <input type="button" name="start" value="Reset"  onClick="resetcountA()">
            <input type="button" name="stop"  value="Pause" onClick="pausecountA()">
        </form>
    </td></tr><tr><td>
        <span id="countB">&nbsp;</span>
    </td><td>
        <form name="countA" onSubmit="0">
            <input type="button" name="start" value="Reset"  onClick="resetcountB()">
            <input type="button" name="stop"  value="Pause" onClick="pausecountB()">
        </form>
    </td></tr>
</table>
</div>
</body></html>
